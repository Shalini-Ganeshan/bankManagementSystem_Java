/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bankmanagementsystem;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author ASUS
 */
public class fastCash extends javax.swing.JFrame {

    private int deposit;
    private int lpin;
    int pin;
    

    /**
     * Creates new form fastCash
     */
    public fastCash() {
        initComponents();
        jButton1.setVisible(false);
        jButton2.setVisible(false);
        jButton3.setVisible(false);
        jButton4.setVisible(false);
        jButton5.setVisible(false);
        jButton6.setVisible(false);
                }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jLabel1.setText("Enter pin");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 390, 199, 40));

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("100");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 460, 60, 20));

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("1000");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 500, -1, -1));

        jButton3.setBackground(new java.awt.Color(0, 0, 0));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("5000");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 540, -1, -1));

        jButton4.setBackground(new java.awt.Color(0, 0, 0));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("500");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 460, 60, -1));

        jButton5.setBackground(new java.awt.Color(0, 0, 0));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("2000");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 500, -1, -1));

        jButton6.setBackground(new java.awt.Color(0, 0, 0));
        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Back");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 540, 60, -1));

        jButton7.setBackground(new java.awt.Color(0, 0, 0));
        jButton7.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("OK");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 460, -1, 20));

        jTextField1.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 430, 100, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\ASUS\\Desktop\\atm.jfif")); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -110, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
          this.dispose();
        new Transactions().setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
            
        try {                                         
            
            
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
            Connection con = null;
            try {
                con = DriverManager.getConnection("jdbc:mysql://localhost/bank", "root", "");
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
            PreparedStatement ps = con.prepareStatement("SELECT pin, deposit from customer where pin=? ");
            try {
                ps.setInt(1, lpin);
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
          
            ResultSet rs = null;
            try {
                rs = ps.executeQuery();
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }


            try {
                if (rs.next()) {
                    try {
                        pin = rs.getInt("pin");
                    } catch (SQLException ex) {
                        Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    deposit = rs.getInt("deposit");
                }
                else {
                    // Handle the case when no rows were found in the result set
                    JOptionPane.showMessageDialog(null, "Customer not found.");
                    new Transactions().setVisible(true); // Exit the method to avoid further processing
                }
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
             String amt=jButton1.getText();
                int withdraw=Integer.parseInt(amt);
                
            if(deposit<withdraw){ JOptionPane.showMessageDialog(null, "Requested amount greater than deposit.");
            }
            
           
             else {
                int newamt = deposit - withdraw;
                PreparedStatement updatePs = con.prepareStatement("UPDATE customer set deposit=? where pin=?");
                updatePs.setInt(1, newamt);
                updatePs.setInt(2, pin);
                updatePs.executeUpdate();
                JOptionPane.showMessageDialog(null, "RS." + withdraw + " withdrawn successfully");
            }
        } catch (SQLException ex) {
            Logger.getLogger(withdraw.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
           try {                                         
            
            
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
            Connection con = null;
            try {
                con = DriverManager.getConnection("jdbc:mysql://localhost/bank", "root", "");
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
            PreparedStatement ps = con.prepareStatement("SELECT pin, deposit from customer where pin=? ");
            try {
                ps.setInt(1, lpin);
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
          
            ResultSet rs = null;
            try {
                rs = ps.executeQuery();
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }


            try {
                if (rs.next()) {
                    try {
                        pin = rs.getInt("pin");
                    } catch (SQLException ex) {
                        Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    deposit = rs.getInt("deposit");
                }
                else {
                    // Handle the case when no rows were found in the result set
                    JOptionPane.showMessageDialog(null, "Customer not found.");
                    new Transactions().setVisible(true); // Exit the method to avoid further processing
                }
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
             String amt=jButton4.getText();
                int withdraw=Integer.parseInt(amt);
                
            if(deposit<withdraw){ JOptionPane.showMessageDialog(null, "Requested amount greater than deposit.");
            }
            
           else {
                int newamt = deposit - withdraw;
                PreparedStatement updatePs = con.prepareStatement("UPDATE customer set deposit=? where pin=?");
                updatePs.setInt(1, newamt);
                updatePs.setInt(2, pin);
                updatePs.executeUpdate();
                JOptionPane.showMessageDialog(null, "RS." + withdraw + " withdrawn successfully");
            }
        } catch (SQLException ex) {
            Logger.getLogger(withdraw.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
           try {                                         
            
            
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
            Connection con = null;
            try {
                con = DriverManager.getConnection("jdbc:mysql://localhost/bank", "root", "");
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
            PreparedStatement ps = con.prepareStatement("SELECT pin, deposit from customer where pin=? ");
            try {
                ps.setInt(1, lpin);
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
          
            ResultSet rs = null;
            try {
                rs = ps.executeQuery();
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }


            try {
                if (rs.next()) {
                    try {
                        pin = rs.getInt("pin");
                    } catch (SQLException ex) {
                        Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    deposit = rs.getInt("deposit");
                }
                else {
                    // Handle the case when no rows were found in the result set
                    JOptionPane.showMessageDialog(null, "Customer not found.");
                    new Transactions().setVisible(true); // Exit the method to avoid further processing
                }
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
             String amt=jButton2.getText();
                int withdraw=Integer.parseInt(amt);
                
            if(deposit<withdraw){ JOptionPane.showMessageDialog(null, "Requested amount greater than deposit.");
            }
            
            else {
                int newamt = deposit - withdraw;
                PreparedStatement updatePs = con.prepareStatement("UPDATE customer set deposit=? where pin=?");
                updatePs.setInt(1, newamt);
                updatePs.setInt(2, pin);
                updatePs.executeUpdate();
                JOptionPane.showMessageDialog(null, "RS." + withdraw + " withdrawn successfully");
            }
        } catch (SQLException ex) {
            Logger.getLogger(withdraw.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
           try {                                         
            
            
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
            Connection con = null;
            try {
                con = DriverManager.getConnection("jdbc:mysql://localhost/bank", "root", "");
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
            PreparedStatement ps = con.prepareStatement("SELECT pin, deposit from customer where pin=? ");
            try {
                ps.setInt(1, lpin);
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
          
            ResultSet rs = null;
            try {
                rs = ps.executeQuery();
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }


            try {
                if (rs.next()) {
                    try {
                        pin = rs.getInt("pin");
                    } catch (SQLException ex) {
                        Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    deposit = rs.getInt("deposit");
                }
                else {
                    // Handle the case when no rows were found in the result set
                    JOptionPane.showMessageDialog(null, "Customer not found.");
                    new Transactions().setVisible(true); // Exit the method to avoid further processing
                }
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
             String amt=jButton5.getText();
                int withdraw=Integer.parseInt(amt);
                
            if(deposit<withdraw){ JOptionPane.showMessageDialog(null, "Requested amount greater than deposit.");
            }
            
            else {
                int newamt = deposit - withdraw;
                PreparedStatement updatePs = con.prepareStatement("UPDATE customer set deposit=? where pin=?");
                updatePs.setInt(1, newamt);
                updatePs.setInt(2, pin);
                updatePs.executeUpdate();
                JOptionPane.showMessageDialog(null, "RS." + withdraw + " withdrawn successfully");
            }
        } catch (SQLException ex) {
            Logger.getLogger(withdraw.class.getName()).log(Level.SEVERE, null, ex);
        }
        
       
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
           try {                                         
            
            
            try {
                Class.forName("com.mysql.cj.jdbc.Driver");
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
            Connection con = null;
            try {
                con = DriverManager.getConnection("jdbc:mysql://localhost/bank", "root", "");
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
            PreparedStatement ps = con.prepareStatement("SELECT pin, deposit from customer where pin=? ");
            try {
                ps.setInt(1, lpin);
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
          
            ResultSet rs = null;
            try {
                rs = ps.executeQuery();
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }


            try {
                if (rs.next()) {
                    try {
                        pin = rs.getInt("pin");
                    } catch (SQLException ex) {
                        Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    deposit = rs.getInt("deposit");
                }
                else {
                    // Handle the case when no rows were found in the result set
                    JOptionPane.showMessageDialog(null, "Customer not found.");
                    new Transactions().setVisible(true); // Exit the method to avoid further processing
                }
            } catch (SQLException ex) {
                Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
            }
             String amt=jButton3.getText();
                int withdraw=Integer.parseInt(amt);
                
            if(deposit<withdraw){ JOptionPane.showMessageDialog(null, "Requested amount greater than deposit.");
            }
            
             else {
                int newamt = deposit - withdraw;
                PreparedStatement updatePs = con.prepareStatement("UPDATE customer set deposit=? where pin=?");
                updatePs.setInt(1, newamt);
                updatePs.setInt(2, pin);
                updatePs.executeUpdate();
                JOptionPane.showMessageDialog(null, "RS." + withdraw + " withdrawn successfully");
            }
        } catch (SQLException ex) {
            Logger.getLogger(withdraw.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
         try {                                         
             // TODO add your handling code here:
             String pino=jTextField1.getText();
             lpin=Integer.parseInt(pino);
             jButton1.setVisible(true);
             jButton2.setVisible(true);
             jButton3.setVisible(true);
             jButton4.setVisible(true);
             jButton5.setVisible(true);
             jButton6.setVisible(true);
             jButton7.setVisible(false);
             jTextField1.setVisible(false);
             jLabel1.setText("Select the amount to withdraw");
             try {
                 Class.forName("com.mysql.cj.jdbc.Driver");
             } catch (ClassNotFoundException ex) {
                 Logger.getLogger(Deposit.class.getName()).log(Level.SEVERE, null, ex);
             }
             Connection con = DriverManager.getConnection("jdbc:mysql://localhost/bank", "root", "");
             PreparedStatement ps = con.prepareStatement("SELECT * FROM customer where pin=? ");
             ps.setInt(1, lpin);
             
             ResultSet rs = ps.executeQuery();
             if (rs.next()) { // Check if there's a result row
                 pin = rs.getInt("pin");
                
             } else {
                 // Handle the case when no rows were found in the result set
                 JOptionPane.showMessageDialog(null, "Customer not found.");
                 new Transactions().setVisible(true); // Exit the method to avoid further processing
             }
         } catch (SQLException ex) {
               Logger.getLogger(fastCash.class.getName()).log(Level.SEVERE, null, ex);
           }
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(fastCash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(fastCash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(fastCash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(fastCash.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new fastCash().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    
}
